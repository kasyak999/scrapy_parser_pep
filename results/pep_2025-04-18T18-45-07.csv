number,name,status
1,PEP Purpose and Guidelines,PA
2,Procedure for Adding New Modules,PA
4,Deprecation of Standard Modules,PA
7,Style Guide for C Code,PA
8,Style Guide for Python Code,PA
10,Voting Guidelines,PA
11,CPython platform support,PA
12,Sample reStructuredText PEP Template,PA
13,Python Language Governance,PA
387,Backwards Compatibility Policy,PA
545,Python Documentation Translations,PA
602,Annual Release Cycle for Python,PA
609,Python Packaging Authority (PyPA) Governance,PA
676,PEP Infrastructure Process,PA
729,Typing governance process,PA
731,C API Working Group Charter,PA
732,The Python Documentation Editorial Board,PA
761,Deprecating PGP signatures for CPython artifacts,PA
20,The Zen of Python,IA
101,Doing Python Releases 101,IA
247,API for Cryptographic Hash Functions,IF
248,Python Database API Specification v1.0,IF
249,Python Database API Specification v2.0,IF
257,Docstring Conventions,IA
272,API for Block Encryption Algorithms v1.0,IF
287,reStructuredText Docstring Format,IA
290,Code Migration and Modernization,IA
333,Python Web Server Gateway Interface v1.0,IF
394,The “python” Command on Unix-Like Systems,IA
399,Pure Python/C Accelerator Module Compatibility Requirements,IF
430,Migrating to Python 3 as the default online documentation,IF
434,IDLE Enhancement Exception for All Branches,IA
452,API for Cryptographic Hash Functions v2.0,IF
457,Notation For Positional-Only Parameters,IF
482,Literature Overview for Type Hints,IF
483,The Theory of Type Hints,IF
514,Python registration in the Windows registry,IA
579,Refactoring C functions and methods,IF
588,GitHub Issues Migration Plan,IF
596,Python 3.9 Release Schedule,IA
607,Reducing CPython’s Feature Delivery Latency,IF
619,Python 3.10 Release Schedule,IA
630,Isolating Extension Modules,IF
635,Structural Pattern Matching: Motivation and Rationale,IF
636,Structural Pattern Matching: Tutorial,IF
659,Specializing Adaptive Interpreter,IF
664,Python 3.11 Release Schedule,IA
672,Unicode-related Security Considerations for Python,IA
693,Python 3.12 Release Schedule,IA
719,Python 3.13 Release Schedule,IA
733,An Evaluation of Python’s Public C API,IF
745,Python 3.14 Release Schedule,IA
762,REPL-acing the default REPL,IF
801,Reserved,IA
3333,Python Web Server Gateway Interface v1.0.1,IF
8000,Python Language Governance Proposal Overview,IF
8002,Open Source Governance Survey,IF
8016,The Steering Council Model,IA
8100,January 2019 Steering Council election,IF
8101,2020 Term Steering Council election,IF
8102,2021 Term Steering Council election,IF
8103,2022 Term Steering Council election,IF
8104,2023 Term Steering Council election,IF
8105,2024 Term Steering Council election,IF
8106,2025 Term Steering Council election,IF
708,Extending the Repository API to Mitigate Dependency Confusion Attacks,SP
458,Secure PyPI downloads with signed repository metadata,SA
563,Postponed Evaluation of Annotations,SA
590,Vectorcall: a fast calling protocol for CPython,SA
625,Filename of a Source Distribution,SA
649,Deferred Evaluation Of Annotations Using Descriptors,SA
658,Serve Distribution Metadata in the Simple Repository API,SA
668,Marking Python base environments as “externally managed”,SA
685,Comparison of extra names for optional distribution dependencies,SA
686,Make UTF-8 mode default,SA
687,Isolating modules in the standard library,SA
691,JSON-based Simple API for Python Package Indexes,SA
699,Remove private dict version field added in PEP 509,SA
701,Syntactic formalization of f-strings,SA
703,Making the Global Interpreter Lock Optional in CPython,SA
714,Rename dist-info-metadata in the Simple API,SA
739,build-details.json 1.0 — a static description file for Python build details,SA
750,Template Strings,SA
751,A file format to record Python dependencies for installation reproducibility,SA
753,Uniform project URLs in core metadata,SA
758,Allow except and except* expressions without parentheses,SA
768,Safe external debugger interface for CPython,SA
770,Improving measurability of Python packages with Software Bill-of-Materials,SA
467,Minor API improvements for binary sequences,S
480,Surviving a Compromise of PyPI: End-to-end signing of packages,S
603,Adding a frozenmap type to collections,S
638,Syntactic Macros,S
653,Precise Semantics for Pattern Matching,S
671,Syntax for late-bound function argument defaults,S
679,Allow parentheses in assert statements,S
694,Upload 2.0 API for Python Package Indexes,S
710,Recording the provenance of installed packages,S
711,PyBI: a standard format for distributing Python Binaries,S
718,Subscriptable functions,S
720,Cross-compiling Python packages,I
725,Specifying external dependencies in pyproject.toml,S
727,Documentation in Annotated Metadata,S
728,TypedDict with Typed Extra Items,S
743,Add Py_COMPAT_API_VERSION to the Python C API,S
744,JIT Compilation,I
746,Type checking Annotated metadata,S
747,Annotating Type Forms,S
748,A Unified TLS API for Python,S
749,Implementing PEP 649,S
752,Implicit namespaces for package repositories,S
755,Implicit namespace policy for PyPI,P
763,Limiting deletions on PyPI,S
764,Inlined typed dictionaries,S
766,Explicit Priority Choices Among Multiple Indexes,I
767,Annotating Read-Only Attributes,S
769,"Add a ‘default’ keyword argument to ‘attrgetter’, ‘itemgetter’ and ‘getitem’",S
771,Default Extras for Python Software Packages,S
772,Packaging governance process,P
773,A Python Installation Manager for Windows,S
774,Removing the LLVM requirement for JIT builds,S
775,Make zlib required to build CPython,S
776,Emscripten Support,I
777,How to Re-invent the Wheel,S
779,Criteria for supported status for free-threaded Python,S
780,ABI features as environment markers,S
781,Make TYPE_CHECKING a built-in constant,S
782,Add PyBytesWriter C API,S
783,Emscripten Packaging,S
784,Adding Zstandard to the standard library,S
785,New methods for easier handling of ExceptionGroups,S
787,Safer subprocess usage using t-strings,S
789,Preventing task-cancellation bugs by limiting yield in async generators,S
100,Python Unicode Integration,SF
201,Lockstep Iteration,SF
202,List Comprehensions,SF
203,Augmented Assignments,SF
205,Weak References,SF
207,Rich Comparisons,SF
208,Reworking the Coercion Model,SF
214,Extended Print Statement,SF
217,Display Hook for Interactive Use,SF
218,Adding a Built-In Set Object Type,SF
221,Import As,SF
223,Change the Meaning of x Escapes,SF
227,Statically Nested Scopes,SF
229,Using Distutils to Build Python,SF
230,Warning Framework,SF
232,Function Attributes,SF
234,Iterators,SF
235,Import on Case-Insensitive Platforms,SF
236,Back to the __future__,SF
237,Unifying Long Integers and Integers,SF
238,Changing the Division Operator,SF
250,Using site-packages on Windows,SF
252,Making Types Look More Like Classes,SF
253,Subtyping Built-in Types,SF
255,Simple Generators,SF
260,Simplify xrange(),SF
261,Support for “wide” Unicode characters,SF
263,Defining Python Source Code Encodings,SF
264,Future statements in simulated shells,SF
273,Import Modules from Zip Archives,SF
274,Dict Comprehensions,SF
277,Unicode file name support for Windows NT,SF
278,Universal Newline Support,SF
279,The enumerate() built-in function,SF
282,A Logging System,SF
285,Adding a bool type,SF
289,Generator Expressions,SF
292,Simpler String Substitutions,SF
293,Codec Error Handling Callbacks,SF
301,Package Index and Metadata for Distutils,SF
302,New Import Hooks,SF
305,CSV File API,SF
307,Extensions to the pickle protocol,SF
308,Conditional Expressions,SF
309,Partial Function Application,SF
311,Simplified Global Interpreter Lock Acquisition for Extensions,SF
318,Decorators for Functions and Methods,SF
322,Reverse Iteration,SF
324,subprocess - New process module,SF
327,Decimal Data Type,SF
328,Imports: Multi-Line and Absolute/Relative,SF
331,Locale-Independent Float/String Conversions,SF
338,Executing modules as scripts,SF
341,Unifying try-except and try-finally,SF
342,Coroutines via Enhanced Generators,SF
343,The “with” Statement,SF
352,Required Superclass for Exceptions,SF
353,Using ssize_t as the index type,SF
357,Allowing Any Object to be Used for Slicing,SF
358,The “bytes” Object,SF
362,Function Signature Object,SF
366,Main module explicit relative imports,SF
370,Per user site-packages directory,SF
371,Addition of the multiprocessing package to the standard library,SF
372,Adding an ordered dictionary to collections,SF
376,Database of Installed Python Distributions,SF
378,Format Specifier for Thousands Separator,SF
380,Syntax for Delegating to a Subgenerator,SF
383,Non-decodable Bytes in System Character Interfaces,SF
384,Defining a Stable ABI,SF
389,argparse - New Command Line Parsing Module,SF
391,Dictionary-Based Configuration For Logging,SF
393,Flexible String Representation,SF
397,Python launcher for Windows,SF
405,Python Virtual Environments,SF
409,Suppressing exception context,SF
412,Key-Sharing Dictionary,SF
414,Explicit Unicode Literal for Python 3.3,SF
415,Implement context suppression with exception attributes,SF
417,Including mock in the Standard Library,SF
418,"Add monotonic time, performance counter, and process time functions",SF
420,Implicit Namespace Packages,SF
421,Adding sys.implementation,SF
424,A method for exposing a length hint,SF
425,Compatibility Tags for Built Distributions,SF
427,The Wheel Binary Package Format 1.0,SF
428,The pathlib module – object-oriented filesystem paths,SF
435,Adding an Enum type to the Python standard library,SF
436,The Argument Clinic DSL,SF
440,Version Identification and Dependency Specification,SF
441,Improving Python ZIP Application Support,SF
442,Safe object finalization,SF
443,Single-dispatch generic functions,SF
445,Add new APIs to customize Python memory allocators,SF
446,Make newly created file descriptors non-inheritable,SF
448,Additional Unpacking Generalizations,SF
450,Adding A Statistics Module To The Standard Library,SF
451,A ModuleSpec Type for the Import System,SF
453,Explicit bootstrapping of pip in Python installations,SF
454,Add a new tracemalloc module to trace Python memory allocations,SF
456,Secure and interchangeable hash algorithm,SF
461,Adding % formatting to bytes and bytearray,SF
465,A dedicated infix operator for matrix multiplication,SF
466,Network Security Enhancements for Python 2.7.x,SF
468,Preserving the order of **kwargs in a function.,SF
471,os.scandir() function – a better and faster directory iterator,SF
475,Retry system calls failing with EINTR,SF
476,Enabling certificate verification by default for stdlib http clients,SF
477,Backport ensurepip (PEP 453) to Python 2.7,SF
479,Change StopIteration handling inside generators,SF
484,Type Hints,SF
485,A Function for testing approximate equality,SF
486,Make the Python Launcher aware of virtual environments,SF
487,Simpler customisation of class creation,SF
488,Elimination of PYO files,SF
489,Multi-phase extension module initialization,SF
492,Coroutines with async and await syntax,SF
493,HTTPS verification migration tools for Python 2.7,SF
495,Local Time Disambiguation,SF
498,Literal String Interpolation,SF
503,Simple Repository API,SF
506,Adding A Secrets Module To The Standard Library,SF
508,Dependency specification for Python Software Packages,SF
515,Underscores in Numeric Literals,SF
517,A build-system independent format for source trees,SF
518,Specifying Minimum Build System Requirements for Python Projects,SF
519,Adding a file system path protocol,SF
520,Preserving Class Attribute Definition Order,SF
523,Adding a frame evaluation API to CPython,SF
524,Make os.urandom() blocking on Linux,SF
525,Asynchronous Generators,SF
526,Syntax for Variable Annotations,SF
527,Removing Un(der)used file types/extensions on PyPI,SF
528,Change Windows console encoding to UTF-8,SF
529,Change Windows filesystem encoding to UTF-8,SF
530,Asynchronous Comprehensions,SF
538,Coercing the legacy C locale to a UTF-8 based locale,SF
539,A New C-API for Thread-Local Storage in CPython,SF
540,Add a new UTF-8 Mode,SF
544,Protocols: Structural subtyping (static duck typing),SF
552,Deterministic pycs,SF
553,Built-in breakpoint(),SF
557,Data Classes,SF
560,Core support for typing module and generic types,SF
561,Distributing and Packaging Type Information,SF
562,Module __getattr__ and __dir__,SF
564,Add new time functions with nanosecond resolution,SF
565,Show DeprecationWarning in __main__,SF
566,Metadata for Python Software Packages 2.1,SF
567,Context Variables,SF
570,Python Positional-Only Parameters,SF
572,Assignment Expressions,SF
573,Module State Access from C Extension Methods,SF
574,Pickle protocol 5 with out-of-band data,SF
578,Python Runtime Audit Hooks,SF
584,Add Union Operators To dict,SF
585,Type Hinting Generics In Standard Collections,SF
586,Literal Types,SF
587,Python Initialization Configuration,SF
589,TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,SF
591,Adding a final qualifier to typing,SF
592,Adding “Yank” Support to the Simple API,SF
593,Flexible function and variable annotations,SF
594,Removing dead batteries from the standard library,SF
597,Add optional EncodingWarning,SF
600,Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,SF
604,Allow writing union types as X | Y,SF
610,Recording the Direct URL Origin of installed distributions,SF
612,Parameter Specification Variables,SF
613,Explicit Type Aliases,SF
614,Relaxing Grammar Restrictions On Decorators,SF
615,Support for the IANA Time Zone Database in the Standard Library,SF
616,String methods to remove prefixes and suffixes,SF
617,New PEG parser for CPython,SF
618,Add Optional Length-Checking To zip,SF
621,Storing project metadata in pyproject.toml,SF
623,Remove wstr from Unicode,SF
624,Remove Py_UNICODE encoder APIs,SF
626,Precise line numbers for debugging and other tools.,SF
627,Recording installed projects,SF
628,Add math.tau,SF
629,Versioning PyPI’s Simple API,SF
632,Deprecate distutils module,SF
634,Structural Pattern Matching: Specification,SF
639,Improving License Clarity with Better Package Metadata,SF
643,Metadata for Package Source Distributions,SF
644,Require OpenSSL 1.1.1 or newer,SF
646,Variadic Generics,SF
647,User-Defined Type Guards,SF
652,Maintaining the Stable ABI,SF
654,Exception Groups and except*,SF
655,Marking individual TypedDict items as required or potentially-missing,SF
656,Platform Tag for Linux Distributions Using Musl,SF
657,Include Fine Grained Error Locations in Tracebacks,SF
660,Editable installs for pyproject.toml based builds (wheel based),SF
667,Consistent views of namespaces,SF
669,Low Impact Monitoring for CPython,SF
670,Convert macros to functions in the Python C API,SF
673,Self Type,SF
675,Arbitrary Literal String Type,SF
678,Enriching Exceptions with Notes,SF
680,tomllib: Support for Parsing TOML in the Standard Library,SF
681,Data Class Transforms,SF
682,Format Specifier for Signed Zero,SF
683,"Immortal Objects, Using a Fixed Refcount",SF
684,A Per-Interpreter GIL,SF
688,Making the buffer protocol accessible in Python,SF
689,Unstable C API tier,SF
692,Using TypedDict for more precise **kwargs typing,SF
695,Type Parameter Syntax,SF
696,Type Defaults for Type Parameters,SF
697,Limited C API for Extending Opaque Types,SF
698,Override Decorator for Static Typing,SF
700,Additional Fields for the Simple API for Package Indexes,SF
702,Marking deprecations using the type system,SF
705,TypedDict: Read-only items,SF
706,Filter for tarfile.extractall,SF
709,Inlined comprehensions,SF
715,Disabling bdist_egg distribution uploads on PyPI,SF
721,Using tarfile.data_filter for source distribution extraction,SF
723,Inline script metadata,SF
730,Adding iOS as a supported platform,SF
735,Dependency Groups in pyproject.toml,SF
737,C API to format a type fully qualified name,SF
738,Adding Android as a supported platform,SF
740,Index support for digital attestations,SF
741,Python Configuration C API,SF
742,Narrowing types with TypeIs,SF
757,C API to import-export Python integers,SF
765,Disallow return/break/continue that exit a finally block,SF
3101,Advanced String Formatting,SF
3102,Keyword-Only Arguments,SF
3104,Access to Names in Outer Scopes,SF
3105,Make print a function,SF
3106,"Revamping dict.keys(), .values() and .items()",SF
3107,Function Annotations,SF
3108,Standard Library Reorganization,SF
3109,Raising Exceptions in Python 3000,SF
3110,Catching Exceptions in Python 3000,SF
3111,Simple input built-in in Python 3000,SF
3112,Bytes literals in Python 3000,SF
3113,Removal of Tuple Parameter Unpacking,SF
3114,Renaming iterator.next() to iterator.__next__(),SF
3115,Metaclasses in Python 3000,SF
3116,New I/O,SF
3118,Revising the buffer protocol,SF
3119,Introducing Abstract Base Classes,SF
3120,Using UTF-8 as the default source encoding,SF
3121,Extension Module Initialization and Finalization,SF
3123,Making PyObject_HEAD conform to standard C,SF
3127,Integer Literal Support and Syntax,SF
3129,Class Decorators,SF
3131,Supporting Non-ASCII Identifiers,SF
3132,Extended Iterable Unpacking,SF
3134,Exception Chaining and Embedded Tracebacks,SF
3135,New Super,SF
3137,Immutable Bytes and Mutable Buffer,SF
3138,String representation in Python 3000,SF
3141,A Type Hierarchy for Numbers,SF
3144,IP Address Manipulation Library for the Python Standard Library,SF
3147,PYC Repository Directories,SF
3148,futures - execute computations asynchronously,SF
3149,ABI version tagged .so files,SF
3151,Reworking the OS and IO exception hierarchy,SF
3154,Pickle protocol version 4,SF
3155,Qualified name for classes and functions,SF
3156,Asynchronous IO Support Rebooted: the “asyncio” Module,SF
5,Guidelines for Language Evolution,PS
6,Bug Fix Releases,PS
160,Python 1.6 Release Schedule,IF
200,Python 2.0 Release Schedule,IF
226,Python 2.1 Release Schedule,IF
251,Python 2.2 Release Schedule,IF
283,Python 2.3 Release Schedule,IF
320,Python 2.4 Release Schedule,IF
347,Migrating the Python CVS to Subversion,PF
356,Python 2.5 Release Schedule,IF
360,Externally Maintained Packages,PF
361,Python 2.6 and 3.0 Release Schedule,IF
373,Python 2.7 Release Schedule,IF
374,Choosing a distributed VCS for the Python project,PF
375,Python 3.1 Release Schedule,IF
385,Migrating from Subversion to Mercurial,PF
392,Python 3.2 Release Schedule,IF
398,Python 3.3 Release Schedule,IF
404,Python 2.8 Un-release Schedule,IF
429,Python 3.4 Release Schedule,IF
438,Transitioning to release-file hosting on PyPI,PS
449,Removal of the PyPI Mirror Auto Discovery and Naming Scheme,PF
464,Removal of the PyPI Mirror Authenticity API,PF
470,Removing External Hosting Support on PyPI,PF
478,Python 3.5 Release Schedule,IF
494,Python 3.6 Release Schedule,IF
512,Migrating from hg.python.org to GitHub,PF
537,Python 3.7 Release Schedule,IF
541,Package Index Name Retention,PF
569,Python 3.8 Release Schedule,IF
581,Using GitHub Issues for CPython,PF
3000,Python 3000,PF
3002,Procedure for Backwards-Incompatible Changes,PF
3003,Python Language Moratorium,PF
3099,Things that will Not Change in Python 3000,PF
3100,Miscellaneous Python 3.0 Plans,PF
8001,Python Governance Voting Process,PF
213,Attribute Access Handlers,SD
219,Stackless Python,SD
222,Web Library Enhancements,SD
233,Python Online Help,SD
267,Optimized Access to Module Namespaces,SD
269,Pgen Module for Python,SD
280,Optimizing access to globals,SD
286,Enhanced Argument Tuples,SD
312,Simple Implicit Lambda,SD
316,Programming by Contract for Python,SD
323,Copyable Iterators,SD
337,Logging Usage in the Standard Library,SD
368,Standard image protocol and class,SD
400,Deprecate codecs.StreamReader and codecs.StreamWriter,SD
403,General purpose decorator clause (aka “@in” clause),SD
407,New release cycle and introducing long-term support versions,PD
419,Protecting cleanup statements from interruptions,SD
423,Naming conventions and recipes related to packaging,ID
444,Python Web3 Interface,ID
447,Add __getdescriptor__ method to metaclass,SD
491,The Wheel Binary Package Format 1.9,SD
499,python -m foo should also bind ‘foo’ in sys.modules,SD
505,None-aware operators,SD
532,A circuit breaking protocol and binary operators,SD
533,Deterministic cleanup for iterators,SD
534,Improved Errors for Missing Standard Library Modules,SD
535,Rich comparison chaining,SD
547,Running extension modules using the -m option,SD
556,Threaded garbage collection,SD
568,Generator-sensitivity for Context Variables,SD
661,Sentinel Values,SD
674,Disallow using macros as l-values,SD
734,Multiple Interpreters in the Stdlib,SD
3124,"Overloading, Generic Functions, Interfaces, and Adaptation",SD
3143,Standard daemon process library,SD
3150,Statement local namespaces (aka “given” clause),SD
3,Guidelines for Handling Bug Reports,PW
9,Sample Plaintext PEP Template,PW
42,Feature Requests,PW
102,Doing Python Micro Releases,IS
103,Collecting information about git,IW
204,Range Literals,SR
206,Python Advanced Library,IW
209,Multi-dimensional Arrays,SW
210,Decoupling the Interpreter Loop,SR
211,Adding A New Outer Product Operator,SR
212,Loop Counter Iteration,SR
215,String Interpolation,SS
216,Docstring Format,IW
220,"Coroutines, Generators, Continuations",IR
224,Attribute Docstrings,SR
225,Elementwise/Objectwise Operators,SR
228,Reworking Python’s Numeric Model,SW
231,__findattr__(),SR
239,Adding a Rational Type to Python,SR
240,Adding a Rational Literal to Python,SR
241,Metadata for Python Software Packages,SS
242,Numeric Kinds,SW
243,Module Repository Upload Mechanism,SW
244,The directive statement,SR
245,Python Interface Syntax,SR
246,Object Adaptation,SR
254,Making Classes Look More Like Types,SR
256,Docstring Processing System Framework,SR
258,Docutils Design Specification,SR
259,Omit printing newline after newline,SR
262,A Database of Installed Python Packages,SR
265,Sorting Dictionaries by Value,SR
266,Optimizing Global Variable/Attribute Access,SW
268,Extended HTTP functionality and WebDAV,SR
270,uniq method for list objects,SR
271,Prefixing sys.path by command line option,SR
275,Switching on Multiple Values,SR
276,Simple Iterator for ints,SR
281,Loop Counter Iteration with range and xrange,SR
284,Integer for-loops,SR
288,Generators Attributes and Exceptions,SW
291,Backward Compatibility for the Python 2 Standard Library,IS
294,Type Names in the types Module,SR
295,Interpretation of multiline string constants,SR
296,Adding a bytes Object Type,SW
297,Support for System Upgrades,SR
298,The Locked Buffer Interface,SW
299,Special __main__() function in modules,SR
303,Extend divmod() for Multiple Divisors,SR
304,Controlling Generation of Bytecode Files,SW
306,How to Change Python’s Grammar,IW
310,Reliable Acquisition/Release Pairs,SR
313,Adding Roman Numeral Literals to Python,SR
314,Metadata for Python Software Packages 1.1,SS
315,Enhanced While Loop,SR
317,Eliminate Implicit Exception Instantiation,SR
319,Python Synchronize/Asynchronize Block,SR
321,Date/Time Parsing and Formatting,SW
325,Resource-Release Support for Generators,SR
326,A Case for Top and Bottom Values,SR
329,Treating Builtins as Constants in the Standard Library,SR
330,Python Bytecode Verification,SR
332,Byte vectors and String/Unicode Unification,SR
334,Simple Coroutines via SuspendIteration,SW
335,Overloadable Boolean Operators,SR
336,Make None Callable,SR
339,Design of the CPython Compiler,IW
340,Anonymous Block Statements,SR
344,Exception Chaining and Embedded Tracebacks,SS
345,Metadata for Python Software Packages 1.2,SS
346,User Defined (“with”) Statements,SW
348,Exception Reorganization for Python 3.0,SR
349,Allow str() to return unicode strings,SR
350,Codetags,IR
351,The freeze protocol,SR
354,Enumerations in Python,SS
355,Path - Object oriented filesystem paths,SR
359,The “make” Statement,SW
363,Syntax For Dynamic Attribute Access,SR
364,Transitioning to the Py3K Standard Library,SW
365,Adding the pkg_resources module,SR
367,New Super,SS
369,Post import hooks,SW
377,Allow __enter__() methods to skip the statement body,SR
379,Adding an Assignment Expression,SW
381,Mirroring infrastructure for PyPI,SW
382,Namespace Packages,SR
386,Changing the version comparison module in Distutils,SS
390,Static metadata for Distutils,SR
395,Qualified Names for Modules,SW
396,Module Version Numbers,IW
401,BDFL Retirement,PR
402,Simplified Package Layout and Partitioning,SR
406,Improved Encapsulation of Import State,SW
408,Standard library __preview__ package,SR
410,Use decimal.Decimal type for timestamps,SR
411,Provisional packages in the Python standard library,IS
413,Faster evolution of the Python Standard Library,PW
416,Add a frozendict builtin type,SR
422,Simpler customisation of class creation,SW
426,Metadata for Python Software Packages 2.0,IW
431,Time zone support improvements,SS
432,Restructuring the CPython startup sequence,SW
433,Easier suppression of file descriptor inheritance,SS
437,"A DSL for specifying signatures, annotations and argument converters",SR
439,Inclusion of implicit pip bootstrap in Python installation,SR
455,Adding a key-transforming dictionary to collections,SR
459,Standard Metadata Extensions for Python Software Packages,SW
460,Add binary interpolation and formatting,SW
462,Core development workflow automation for CPython,PW
463,Exception-catching expressions,SR
469,Migration of dict iteration code to Python 3,SW
472,Support for indexing with keyword arguments,SR
473,Adding structured data to built-in exceptions,SR
474,Creating forge.python.org,PW
481,"Migrate CPython to Git, Github, and Phabricator",PW
490,Chain exceptions at C level,SR
496,Environment Markers,IR
497,A standard mechanism for backward compatibility,PR
500,A protocol for delegating datetime methods to their tzinfo implementations,SR
501,General purpose template literal strings,SW
502,String Interpolation - Extended Discussion,IR
504,Using the System RNG by default,SW
507,Migrate CPython to Git and GitLab,PR
509,Add a private version to dict,SS
510,Specialize functions with guards,SR
511,API for code transformers,SR
513,A Platform Tag for Portable Linux Built Distributions,IS
516,Build system abstraction for pip/conda etc,SR
521,Managing global context via ‘with’ blocks in generators and coroutines,SW
522,Allow BlockingIOError in security sensitive APIs,SR
531,Existence checking operators,SW
536,Final Grammar for Literal String Interpolation,SW
542,Dot Notation Assignment In Function Header,SR
543,A Unified TLS API for Python,SW
546,Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,SR
548,More Flexible Loop Control,SR
549,Instance Descriptors,SR
550,Execution Context,SW
551,Security transparency in the Python runtime,IW
554,Multiple Interpreters in the Stdlib,SS
555,Context-local variables (contextvars),SW
558,Defined semantics for locals(),SW
559,Built-in noop(),SR
571,The manylinux2010 Platform Tag,IS
575,Unifying function/method classes,SW
576,Rationalize Built-in function classes,SW
577,Augmented Assignment Expressions,SW
580,The C call protocol,SR
582,Python local packages directory,SR
583,A Concurrency Memory Model for Python,IW
595,Improving bugs.python.org,IW
598,Introducing incremental feature releases,IW
599,The manylinux2014 Platform Tag,IS
601,Forbid return/break/continue breaking out of finally,SR
605,A rolling feature release stream for CPython,IR
606,Python Compatibility Version,SR
608,Coordinated Python release,SR
611,The one million limit,SW
620,Hide implementation details from the C API,SW
622,Structural Pattern Matching,SS
631,Dependency specification in pyproject.toml based on PEP 508,SS
633,Dependency specification in pyproject.toml using an exploded TOML table,SR
637,Support for indexing with keyword arguments,SR
640,Unused variable syntax,SR
641,Using an underscore in the version portion of Python 3.10 compatibility tags,SR
642,Explicit Pattern Syntax for Structural Pattern Matching,SR
645,Allow writing optional types as x?,SW
648,Extensible customizations of the interpreter at startup,SR
650,Specifying Installer Requirements for Python Projects,SW
651,Robust Stack Overflow Handling,SR
662,Editable installs via virtual wheels,SR
663,"Standardizing Enum str(), repr(), and format() behaviors",IR
665,A file format to list Python dependencies for reproducibility of an application,SR
666,Reject Foolish Indentation,SR
677,Callable Type Syntax,SR
690,Lazy Imports,SR
704,Require virtual environments by default for package installers,SW
707,A simplified signature for __exit__ and __aexit__,SR
712,Adding a “converter” parameter to dataclasses.field,SR
713,Callable Modules,SR
722,Dependency specification for single-file scripts,SR
724,Stricter Type Guards,SW
726,Module __setattr__ and __delattr__,SR
736,Shorthand syntax for keyword arguments at invocation,SR
754,IEEE 754 Floating Point Special Values,SR
756,Add PyUnicode_Export() and PyUnicode_Import() C functions,SW
759,External Wheel Hosting,SW
760,No More Bare Excepts,SW
2026,Calendar versioning for Python,PR
3001,Procedure for reviewing and improving standard library modules,PW
3103,A Switch/Case Statement,SR
3117,Postfix type declarations,SR
3122,Delineation of the main module,SR
3125,Remove Backslash Continuation,SR
3126,Remove Implicit String Concatenation,SR
3128,BList: A Faster List-like Type,SR
3130,Access to Current Module/Class/Function,SR
3133,Introducing Roles,SR
3136,Labeled break and continue,SR
3139,Cleaning out sys and the “interpreter” module,SR
3140,"str(container) should call str(item), not repr(item)",SR
3142,Add a “while” clause to generator expressions,SR
3145,Asynchronous I/O For subprocess.Popen,SW
3146,Merging Unladen Swallow into CPython,SW
3152,Cofunctions,SR
3153,Asynchronous IO support,SS
8010,The Technical Leader Governance Model,IR
8011,Python Governance Model Lead by Trio of Pythonistas,IR
8012,The Community Governance Model,IR
8013,The External Council Governance Model,IR
8014,The Commons Governance Model,IR
8015,Organization of the Python community,IR
801,RESERVED,
